# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '1f52ea0b-f148-44c9-ac5d-bfc634e8ea4a'
  imageRepository: 'fbourquigfmonkeyisland'
  containerRegistry: 'gfmonkeyisland.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  sourceFilepath: '$(Build.SourcesDirectory)/src'
  tag: '$(Build.BuildId)'
  buildConfiguration: 'Release'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: BuildAndTest
  displayName: Build and Test
  jobs:
  - job: BuildAndTest
    displayName: Build and Test
    pool:
      vmImage: $(vmImageName)
    steps:     
      # Restore
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects:  $(sourceFilepath)/*.sln
    ## Build all csproj    
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        arguments: --configuration $(buildConfiguration) --no-restore
        projects: $(sourceFilepath)/*.sln
    # Collect code coverage metrics with Coverlet
    # All Unit Tests csproj 
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        arguments: '--no-build --configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        publishTestResults: true
        projects:  $(sourceFilepath)/**/*.Tests.Unit.csproj
    # Publish all unit tests results and code coveradge
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

- stage: DockerBuildAndPush
  displayName: Docker Build and Push
  jobs:
  - job: DockerBuildAndPush
    displayName: Build and Push Docker image on docker to container registry
    pool:
      vmImage: $(vmImageName)
    steps:      
    - task: Docker@2
      displayName: Build and push a docker image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
